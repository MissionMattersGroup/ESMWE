public class ProgressNoteInterfacePrintFormatController : AspxController
{
    /* Description : This controller is used to display the Goals,objectives and TimeEntries related to Progress Note
     * Version               Author            Date (DD-MM-YYYY)           Change Log
     * 1.1                  Anuradha N          14/4/2016                  Implemented Print Functionality
     * 1.2                  Twinkle P           03/05/2016                 Updated the functionality for Add More Rows for Time Entries and Added Service Title [ESMWE-413 & 561]
     * 1.3                  Anuradha N          03/05/2016                 Change Title of Progress Note Page [ESMWE-554]
     * 1.4                                      12/05/2016                 Optimized code by removing save, add and remove functionalities
     * 1.5                                      13/05/2016                 Implemented functionality to display title for each signature field [ESMWE-571]
    */
    
    // This variable is used to store the value of progress Note id passed in URL
    string strProgressNoteId;
    // This variable is used to store the value of Type View passed in URL
    string strProgressNoteTypeView;
    // This variable is used to store the value of Service id passed in URL
    string strServiceId;
    
	public override ActionResponse Index()
	{
	    init();
	    //string for fields commaseprated values for progress note
	    string strprogressNoteFields = "Staff_Name__c,Status__c,Client__c,Client_DOB__c,Service__c,Service_Title__c,Progress_Funder__c,Billing_Code__c,Time_In__c,Time_Out__c,Units_of_service__c,Completion_Date__c,Progress_Note_Narrative__c";
	    
	    //string for fields commaseprated values for Goal
	    string strGoalFields ="Outcome__c,Goal_Name__c";
	    
	    // string for fields commaseprated values for Goal data
	    string strGoalDataFields = "Goal_Status__c,Progress_Key__c,Percent_Complete__c,Goal_Notes__c";
	    
	    // string for fields commaseprated values for Time Entries
	    string strTimeEntriesFields = "Payer_Code__c,Time_Entries_Billing_Code__c,Time_Entries_Time_In__c,Time_Entries_Time_Out__c,Time_Entries_Units_of_Service__c,Description__c";
	    
	    //This databag contains the progress note comma separated fields
	    DataBag.lstProgressNoteFields = getTheCommaSeperatedValues(strprogressNoteFields);
	    
	    //This databag contains the Goal comma separated fields
	    DataBag.lstGoalFields = getTheCommaSeperatedValues(strGoalFields);
	    
	    //This databag contains the Goal data comma separated fields
	    DataBag.lstGoalDataFields = getTheCommaSeperatedValues(strGoalDataFields);
	    
	    //This databag contains the Time Entries comma separated fields
	    DataBag.lstTimeEntriesFields = getTheCommaSeperatedValues(strTimeEntriesFields);
	    
	    
	    //check the page url contains typeView if not contains return error message to page
	    // otherwise go forward to inside the code for fetch id 
	    string CurrentURL = Request.Url.AbsoluteUri;
        bool bType=CurrentURL.Contains("?typeView=");
        
	    if(bType==false){
        	AspxPage.AddMessage(CustomLabels.ErrorOnProgressNoteType);
        	DataBag.errorMessage = CustomLabels.ErrorOnProgressNoteType;
            return View(); 
	    }
	    else{
    	    // Stores the type of the page which is passed as a param in the URL
            strProgressNoteTypeView = AspxPage.GetParameter("typeView");
            
            //if the TypeView is blank or empty then show the error message on page
            if(string.IsNullOrEmpty(strProgressNoteTypeView)){
               	AspxPage.AddMessage(CustomLabels.ErrorOnProgressNoteType);
               	DataBag.errorMessage = CustomLabels.ErrorOnProgressNoteType;
               	return View();
            }
            else{ // if TypeView contains value
                    strProgressNoteTypeView =  strProgressNoteTypeView.ToLower();
                    // Check if TypeView values are not equal to new , edit and detail show error message on page
                    if (!strProgressNoteTypeView.Equals("new") &&
                        !strProgressNoteTypeView.Equals("edit") &&
                        !strProgressNoteTypeView.Equals("detail") &&
                        !strProgressNoteTypeView.Equals("clone")) {
                            
                        AspxPage.AddMessage(CustomLabels.ErrorOnProgressNoteType);
                        DataBag.errorMessage = CustomLabels.ErrorOnProgressNoteType;
               	        return View();
                    } 
                    else { // if TypeView Contains correct values
                        // if TypeView is equal to edit or detail then check for the progress note id
                        if (strProgressNoteTypeView.Equals("edit") || strProgressNoteTypeView.Equals("detail") || strProgressNoteTypeView.Equals("clone") ) {
                            
                            DataBag.strProgressNoteTypeView = strProgressNoteTypeView;
                            bool bId = CurrentURL.Contains("id=");
                            //Check if URL contains Id parameter if not then show the error message
                            if(bId==false){
                            	AspxPage.AddMessage(CustomLabels.ErrorOnProgressNoteId);
                            	DataBag.errorMessage = CustomLabels.ErrorOnProgressNoteId;
                                return View(); 
                    	    }
                    	    else { // Url contains Id paramter
                    	       // Stores the type of the id which is passed as a param in the URL
                               strProgressNoteId = AspxPage.GetParameter("id");
                               //Check the Id is blank
                                if(string.IsNullOrEmpty(strProgressNoteId)){
                                   	AspxPage.AddMessage(CustomLabels.ErrorOnProgressNoteId);
                                   	DataBag.errorMessage = CustomLabels.ErrorOnProgressNoteId;
                                   	return View();
                                }
                                else {
                                    //Start --Progress Note Query Record Fetch and Create LIst of FIleds to display 
                                    string queryStr="SELECT";
                                    string fixFieldsProgressNote=" Id,Service__c,Family_Signature__c,Staff_Signature__c,Supervisor_Signature__c,IsProgressNoteRecordLocked__c,";
                                    fixFieldsProgressNote += "IsProgressNoteRecordLockedForSupervisor__c,Family_Signee_Name__c,Staff_Signee_Name__c,Supervisor_Signee_Name__c,";
                                    fixFieldsProgressNote += "Family_Signed_Date__c,Staff_Signed_Date__c,Supervisor_Signed_Date__c,";
                                    fixFieldsProgressNote += "External_Signature__c,External_Signee_Name__c,External_Role_Name__c,External_Relationship__c,External_Signed_Date__c,";
                                    fixFieldsProgressNote += "Family_Role_Name__c,Staff_Role_Name__c,Supervisor_Role_Name__c,Relationship_Type_Family__c";
                                    
                                    queryStr+= createQueryStringFields(fixFieldsProgressNote,strprogressNoteFields,"Force__Progress_Note__c");
                                    queryStr+=" WHERE Id=\""+strProgressNoteId+"\"";
            	                    queryStr+=" LIMIT 1";
            	                    
            	                    //Assign the dynamic query to the Progress Note
            		                 List<Force__Progress_Note__c> lstpronoteobj = new List<Force__Progress_Note__c>();
            		                 lstpronoteobj = (List<Force__Progress_Note__c>)Database.Query(queryStr);
            		                if(lstpronoteobj != null && lstpronoteobj.Count() > 0) {
            		                    
            		                    DataBag.DisplayPNI = true;
            		                    //This code snippet will set the value of the Scroll Position on Save Button on all the rows
            		                    bool bScrollView = CurrentURL.Contains("scrollToOnLoad=");
            		                    if(bScrollView == true){
            		                        DataBag.PositionOfTheButton =  AspxPage.GetParameter("scrollToOnLoad");
            		                         //DataBag.IdOfTheButton =  AspxPage.GetParameter("scrollToOnLoad");
            		                    }
            		                    
            		                    DataBag.lstProgressNoteObj = lstpronoteobj;
            		                    
            		                    DataBag.IsProgressNoteRecordLocked = lstpronoteobj[0].IsProgressNoteRecordLocked__c;
            		                    
            		                    DataBag.IsProgressNoteRecordLockedForSupervisor = lstpronoteobj[0].IsProgressNoteRecordLockedForSupervisor__c;
            		                    
            		                    DataBag.strProgressNoteId = strProgressNoteId;
            		                    
            		                    DataBag.strServiceId = lstpronoteobj[0].Service__c;
            		                    
            		                    DataBag.lstGoalObj = getGoals(strGoalFields);
            		                    
            		                    List<string> setOfGoalId = new List<string>();
                        	            // Strore Goal's Ids into List
                        	            foreach (Force__Goals__c element in  DataBag.lstGoalObj) {
                        	                setOfGoalId.Add(element.Id);
                        	            }
                        	            
                        	            DataBag.lstGoalDataObj = getGoalData(strGoalDataFields, setOfGoalId);
                        	            
                        	            DataBag.lstTimeEntriesObj = getTimeEntries(strTimeEntriesFields);
                        	            
                        	            //to get current staff member user to initialize DataBag.strStaffContactId
                                        getStaffContactId();
                                        
                                        //to get current progress note service name
                                        getProgressNoteServiceName();
                                        
                                        checkStatusCompleted(DataBag.lstProgressNoteObj);
                                        
            		                }
            		                else {
            		                    //The error message displayed when No Records Found:Record does not exist for the passed id in the parameter.
            		                    AspxPage.AddMessage(CustomLabels.ErrorOnProgressNoteId);
            		                    DataBag.errorMessage = CustomLabels.ErrorOnProgressNoteId;
            		                    return View();
            		                }
                                }
                    	    }
                        }
                    }
                    
            }
	    }
		return View();
	}
	
	/*
	* Description: Method to intialize the DataBag and the string with appropriate value
	*/
	public void init(){
	    // This Databag is used to store the value of IsProgressNoteRecordLocked__c checkbox to locked the progress note record
	    DataBag.IsProgressNoteRecordLocked = "";
	    
	    // This Databag is used to store the value of IsProgressNoteRecordLockedForSupervisor__c checkbox to locked the progress note record for supervisor
	    DataBag.IsProgressNoteRecordLockedForSupervisor = "";
	    
	    // This Databag is used to store the exception occured on page
	    DataBag.Exception = "";
	    
	    //This Databag is used to store the Custom error message , generate via wrong value passed in URL
	    DataBag.errorMessage = "";
	    
	    // This Databag list is used to store the value of progress Note object
	    DataBag.lstProgressNoteObj = new List<Force__Progress_Note__c>();
	    
	    // This Databag is used to store the value of progress Note Id
	    DataBag.strProgressNoteId="";
	    
	    // This Databag is used to store the value of TypeView
	    DataBag.strProgressNoteTypeView="";
	    
	    // This Databag is used to store the value of Staff contact id (Magentrix user contact id)
	    DataBag.strStaffContactId = "";
	    
	    //This Databag is used to store the value of Service id from progress note for edit and detail view
	    //This Databag is used to store the value of Service id get grom url for New View
	    DataBag.strServiceId = "";
	    
	    // This Databag list is used to store the value of goal object
	    DataBag.lstGoalObj = new List<Force__Goals__c>();
	    
	    // This Databag list is used to store the value of Goal data object
	    DataBag.lstGoalDataObj = new List<Force__Progress_Update__c>();
	    
	    // This Databag list is used to store the value of Time Entries data object
	    DataBag.lstTimeEntriesObj = new List<Force__Time_Entries__c>();
	    
        
        //This databag variable is used to show the progress Note interface or hide it
	    DataBag.DisplayPNI = false;
	    
	    //This databag variable is used to show the field in readonly mode or not
	    DataBag.IsStaffMember = false;
	    
	    //This databag variable is used to show/hide the Add time Entries button
	    DataBag.IsActiveButton = false;
	    
	    // This databag variable is used to store the list of login user
	    //DataBag.lstStaffMemberUser = new List<User>() ;
	    
	    //This databag is used to create new Goal Data(Goal Update) 
	    DataBag.lstNewGoalData = new List<Force__Progress_Update__c>();
	    
	    //This databag is used to create new Time Entries
	    DataBag.lstNewTimeEntries = new List<Force__Time_Entries__c>();
	    
	    //This databag is used to store the id of the Button Clicked
	    DataBag.IdOfTheButton = "";
	    
	    //This databag is used to store the positon of the Button Clicked
	    DataBag.PositionOfTheButton = "";
	    
	    //This databag is used to show the success meassage on popup
	    DataBag.IsSuccessProgressNote = "false";
	    
	    //This databag is used to hide the buttons
	    DataBag.IsStatusCompleted = false;
	    
	    //This databag is used to check the size of Time Entries list
	    DataBag.IsTimeEntriesPresent = "false";
	    
	    //This databag is used to store the value of Service name
	    DataBag.strProgressNoteServiceName = "";
	    
	}

    /*
    * Description: Method to set lookup filter of billing code
    * Input      : lstProgressNoteObj : lst of Progress Note which have the updated values
    * Output     : set billing code lookup
    */
    [HttpPost]
	public ActionResponse UpdateLookUpFilter(List<Force__Progress_Note__c> lstProgressNoteObj){
	    int count = 0;
       
        foreach (var progressNoteObj in lstProgressNoteObj)
        {
            foreach (var field in DataBag.lstProgressNoteFields)
            {
                string val = Request["m$" + count.ToString() + "$." +  field];
                progressNoteObj.Set(field, val);
                   
            }
             count++;
        }
        return View();
    }
    
    /*
    * Description: Method to get Contact Id of current magentrix login User
    * Output : Id(String) of Contact
    */
	public void getStaffContactId() 
	{
	    List<User> lstUser = new List<User>();
	    var CurrentUserId = Database.Retrieve(SystemInfo.UserId).Id;
	    string queryStr="SELECT Id, ContactId From User Where Id =\""+CurrentUserId+"\"";
	    lstUser = (List<User>)Database.Query(queryStr);
	    if (lstUser.Count >0) {
	        if(!string.IsNullOrEmpty(lstUser[0].ContactId)) {
	            DataBag.IsStaffMember = true;
	            //DataBag.lstStaffMemberUser = lstUser;
	            DataBag.strStaffContactId = lstUser[0].ContactId;
	        }
	    }
	}
	
	/*
    * Description: Method to get the Service name of the service of progress note
    */
	public void getProgressNoteServiceName() 
	{
	    List<Force__Service__c> lstService = new List<Force__Service__c>();
	    string strProgressNoteService = DataBag.strServiceId;
	    if(!string.IsNullOrEmpty(strProgressNoteService)) {
           
            lstService = Database.Query<Force__Service__c>(a => a.Id == strProgressNoteService).Select(f => new { f.Id, f.Name })
                                                         .ToListAsAdmin();
                                                         
            if (lstService.Count >0 && !string.IsNullOrEmpty(lstService[0].Name)){
                DataBag.strProgressNoteServiceName = lstService[0].Name;
            }
	    }
	}
	
	/*
    * Description: Method to get Service record autopopulate fields on progress Note
    * Input : Id(String) of Service
    * Output: List of Progress Note
    */
	public void getServiceToAutopopulate(string serviceId) 
	{
	    // list of progress note for databag
	    List<Force__Progress_Note__c> lstpronoteobj = new List<Force__Progress_Note__c>();
                                       
        //create new record for new view of Progress note Information
        Force__Progress_Note__c pronoteobj = new Force__Progress_Note__c();
                                       
        //add staff member id to New progress note records for auto populate
        pronoteobj.Staff_Name__c =DataBag.strStaffContactId;
        pronoteobj.Service__c = DataBag.strServiceId;
	    
	    if(!string.IsNullOrEmpty(serviceId))
	    {
    	    List<Force__Service__c> lstService = new List<Force__Service__c>();
    	    string queryStr="SELECT";
    	    string fixServiceFields = " Id";
    	    string strServiceFields = "Funder__c,Client__c,Billing_Code__c";
    	    queryStr+= createQueryStringFields(fixServiceFields,strServiceFields,"Force__Service__c");
            queryStr+=" WHERE Id=\""+serviceId+"\"";
    	    lstService = (List<Force__Service__c>)Database.Query(queryStr);
    	    if (lstService.Count >0) {
    	        
    	        pronoteobj.Progress_Funder__c = lstService[0].Funder__c;
    	        pronoteobj.Client__c = lstService[0].Client__c;
    	        pronoteobj.Billing_Code__c = lstService[0].Billing_Code__c;
    	        
    	    }
	    }
        lstpronoteobj.Add(pronoteobj);                              
        // add new record list of Progress note to Data bag for display on page
        DataBag.lstProgressNoteObj = lstpronoteobj;
	}
	
	/*
    * Description: Method to to get all Goals related to Services
    * Input      : Id(string) of goal Fields
    * Output     : List of Goals
    */
	public List<Force__Goals__c> getGoals(string strGoalFields) 
	{
    	//Start --Goal Query Record Fetch and Create LIst of FIleds to display 
        string queryStr="SELECT";
        string fixFieldsGoals=" Id,Service__c";
        queryStr+= createQueryStringFields(fixFieldsGoals,strGoalFields,"Force__Goals__c");
        queryStr+=" WHERE Service__c=\""+DataBag.strServiceId+"\"";
        
        //Assign the dynamic query to the Goal
        List<Force__Goals__c> lstGoalobj = new List<Force__Goals__c>();
        lstGoalobj = (List<Force__Goals__c>)Database.Query(queryStr);
        return lstGoalobj;
	}
	
	/*
    * Description: Method to to get all Goal Data related to Objective
    * Input      : Id(string) of Goal Data Fields
    * Input      : List of Objective
    * Output     : List of Goal data
    */
	public List<Force__Progress_Update__c> getGoalData(string strGoalDataFields, List<string> setOfGoalId) 
	{
    	//Start --Goal data Query Record Fetch and Create List of fields to display 
        string queryStr="SELECT";
        string fixFieldsGoalData=" Id,Goal__c,Progress_Note__c";
        queryStr+= createQueryStringFields(fixFieldsGoalData,strGoalDataFields,"Force__Progress_Update__c");
        
        queryStr+=" WHERE Progress_Note__c=\""+DataBag.strProgressNoteId+"\"";
        //To fetch latest created Goal Data and display on the page accordingly.
        queryStr+= " Order By CreatedOn Desc";
        
        //Assign the dynamic query to the Objective
        List<Force__Progress_Update__c> lstGoalDataobj = new List<Force__Progress_Update__c>();
        lstGoalDataobj = (List<Force__Progress_Update__c>)Database.Query(queryStr);
        
        List<Force__Progress_Update__c> listOfFilteredGoalData = new List<Force__Progress_Update__c>();
        foreach (Force__Progress_Update__c element in lstGoalDataobj) {
	        if(setOfGoalId.Contains(element.Goal__c)) {
	            listOfFilteredGoalData.Add(element);
	        }
	    }
	    
        return listOfFilteredGoalData;
	}
	
	/*
    * Description: Method to save the signature on Progress Note object
    * Input      : lstProgressNoteObj : list of Progress Note which have the updated values
    * Output     : save the signatures
    */
    [HttpPost]
    public ActionResponse SaveSignature(List<Force__Progress_Note__c> lstProgressNoteObj){
        
        foreach (var progressNoteObj in lstProgressNoteObj)
        {
            //Stored the value of Staff signature
            string StaffSignval    = Request["StaffSignToUpdateProgressNote"];
            
            //Check whether the Staff Signature is Blank or Not
            bool checkStaffSignatureVal = checkTheSignatureValue(StaffSignval);
            
            //Stored the value of Supervisor signature
            string SupervisorSignval = Request["SupervisorSignToUpdateProgressNote"];
            //Check whether the Supervisor Signature is Blank or Not
            bool checkSupervisorSignatureVal = checkTheSignatureValue(SupervisorSignval);
            
            //stored the value of family signee name
            string StaffSigneeName = Request["m$0$.Staff_Signee_Name__c"]; 
            
            //stored the value of family signee name
            string SupervisorSigneeName = Request["m$0$.Supervisor_Signee_Name__c"];
            if(checkStaffSignatureVal == false){
                progressNoteObj.Set("Staff_Signature__c", "");
                progressNoteObj.Set("Staff_Signed_Date__c","");
                progressNoteObj.Set("Staff_Signee_Name__c", "");
            }
            else{
                progressNoteObj.Set("Staff_Signature__c", StaffSignval);
                progressNoteObj.Set("Staff_Signed_Date__c", DateTime.Today);
                progressNoteObj.Set("Staff_Signee_Name__c", StaffSigneeName);
            }
            
            if(checkSupervisorSignatureVal == false){
                progressNoteObj.Set("Supervisor_Signature__c","");
                progressNoteObj.Set("Supervisor_Signed_Date__c", "");
                progressNoteObj.Set("Supervisor_Signee_Name__c", "");
            }
            else{
                progressNoteObj.Set("Supervisor_Signature__c", SupervisorSignval);
                progressNoteObj.Set("Supervisor_Signed_Date__c", DateTime.Today);
                progressNoteObj.Set("Supervisor_Signee_Name__c", SupervisorSigneeName);   
            }
            
            
        }
        
        try {
            Edit(lstProgressNoteObj);
            DataBag.Exception = "";
        } 
        catch (Exception e) {
            DataBag.Exception = e.Message;
            return View();
        }
        
        //Method called to set the DataBag with the Scroll Position
        getScrollValue();
        
	    return Redirect(ActivePages.ProgressNoteInterface, new { typeView = "detail",id=DataBag.strProgressNoteId , scrollToOnLoad = DataBag.PositionOfTheButton});
	}

	/*
    * Description: Method to check the value of the signature is blank or not
    * Input      : signatureVal: The signature for which the value needs to be checked
    * Output     : boolean true: if it the signature is blank and false: if not
    */
    public bool checkTheSignatureValue(string signatureVal){
        int firstIndexValues         = signatureVal.IndexOf('[');
        int lastIndexValues          = signatureVal.LastIndexOf(']');
        int lengthOfStrSupervisorSig = lastIndexValues - firstIndexValues + 1;
    
        string subStringOfSignVal = signatureVal.Substring(firstIndexValues+1,lengthOfStrSupervisorSig-2);
        if(!string.IsNullOrEmpty(subStringOfSignVal)){
            return true;
        }
        return false;
    }
	
	/*
    * Description: Method to to get all Time Entries related to Progress Note
    * Input      : Id(string) of Time Entires Fields
    * Output     : List of Time Entries
    */
	public List<Force__Time_Entries__c> getTimeEntries(string strTimeEntriesFields) 
	{
    	//Start --Time Entries Query Record Fetch and Create List of Fileds to display 
        string queryStr="SELECT";
        string fixFieldsTimeEntries=" Id,Progress_Note__c";
        queryStr+= createQueryStringFields(fixFieldsTimeEntries,strTimeEntriesFields,"Force__Time_Entries__c");
        queryStr+=" WHERE Progress_Note__c =\""+DataBag.strProgressNoteId+"\"";
        
        //Assign the dynamic query to the Time Entries
        List<Force__Time_Entries__c> lstTimeEntriesobj = new List<Force__Time_Entries__c>();
        lstTimeEntriesobj = (List<Force__Time_Entries__c>)Database.Query(queryStr);
        
        if(lstTimeEntriesobj.Count > 0) {
            DataBag.IsTimeEntriesPresent = "true";
        }
        return lstTimeEntriesobj;
	}

	/*
    * Description: Method to Lock the record on edit view
    */
	public void lockProgressNoteRecord()
	{   
	    if(DataBag.IsProgressNoteRecordLocked == true && DataBag.strProgressNoteTypeView == "edit" 
	       && (CustomLabels.ISP_RoleForStaffSignatures.Equals(UserInfo.Role.Name) || CustomLabels.ISP_RoleForSupervisorSignatures.Equals(UserInfo.Role.Name))) {
	        DataBag.strProgressNoteTypeView = "detail";
	    }
	    
	}
	
    /*
    * Description: Method to redirect to service record
    * Input      : lstProgressNoteObj : list of Progress Note
    * Output     : redirect to the service record
    */
    [HttpPost]
    public ActionResponse redirectToServiceRecord(List<Force__Progress_Note__c> lstProgressNoteObj)
    {
        return Redirect("/"+lstProgressNoteObj[0].Service__c) ;
    }
    
    /*
    * Description: Method to Hide the buttons
    * Input      : lstProgressNoteObj : list of Progress Note
    * Output     : Hide the buttons on progress Note interface
    */
    public void checkStatusCompleted(List<Force__Progress_Note__c> lstProgressNoteObj)
    {
        foreach (var progresssNoteHideObj in lstProgressNoteObj) {
            if (progresssNoteHideObj.Status__c != null && progresssNoteHideObj.Status__c.Equals("Completed", StringComparison.OrdinalIgnoreCase)) {
                DataBag.IsStatusCompleted = true;
            }
        }
    }
    /*
	* Description: Method to form the Query
	* Input      : strOfQueryFields : The fields in comma seperated format
	* Input      : fixFields : Fixed fields such as Id
    * Output     : strQuery: returns a query of string which are comma seperated and accessable by DataBag [Ex: format for DataBag {"aa","bb"}]
	*/
	public string createQueryStringFields(string fixFields, string strOfQueryFields, string ObjectName){
	    
	    string strQuery = "";
	    
	    if(string.IsNullOrEmpty(fixFields) ){
	        
	        strQuery = strOfQueryFields;
	    }
	    else{
	      strQuery = fixFields+", "+strOfQueryFields; 
	    }
	    strQuery = strQuery + " FROM "+ ObjectName;
	    
	    return strQuery;      
	}
	
	/*
	* Description: Method to get the list of fields in comma seperated double quote to be accessed by the DataBag
	* Input      : strOfFields : The fields in comma seperated format
    * Output     : lstOfFieldForTheObj: returns a list of fields which are comma seperated and accessable by DataBag [Ex: format for DataBag {"aa","bb"}]
	*/
	public List<string> getTheCommaSeperatedValues(string strOfFields){
	    
	    List<string> lstOfFieldForTheObj = new List<string>();
	    if(strOfFields != null){
	        var tempConfig = (string)strOfFields;
            string[] separators = {","};
            lstOfFieldForTheObj = tempConfig.Split(separators, StringSplitOptions.RemoveEmptyEntries).ToList();
	    }
	    return lstOfFieldForTheObj;      
	}
	/*
    * Description: Method to get the scroll position
    * Input      : 
    * Output     : Stores the scroll value
    */
	[HttpPost]
	public ActionResponse getScrollValue()
	{   
	    DataBag.IdOfTheButton = Request["scrollIdName"];
	    DataBag.PositionOfTheButton = (Request["scrollPositionIdName"]);
	    return View();
	}
	
}